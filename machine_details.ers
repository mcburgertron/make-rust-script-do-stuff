#!/usr/bin/env rust-script
//! ```cargo
//! [dependencies]
//! clap = { version = "4", features = ["derive"] }
//! serde = { version = "1", features = ["derive"] }
//! serde_json = "1"
//! sysinfo = { version = "0.35", features = ["serde"] }
//! ```

use clap::Parser;
use serde::Serialize;
use sysinfo::{System, Disks};
use std::process::Command;

fn run_command(cmd: &str, args: &[&str]) -> Option<String> {
    Command::new(cmd)
        .args(args)
        .output()
        .ok()
        .and_then(|o| String::from_utf8(o.stdout).ok())
        .and_then(|s| if s.trim().is_empty() { None } else { Some(s) })
}

#[derive(Parser)]
#[command(author, version, about = "Display physical machine details" )]
struct Args {
    /// Output information as JSON
    #[arg(long)]
    json: bool,
}

#[derive(Serialize)]
struct MachineInfo {
    os_name: Option<String>,
    kernel_version: Option<String>,
    hostname: Option<String>,
    cpu_brand: String,
    cpu_cores: usize,
    total_memory: u64,
    manufacturer: Option<String>,
    model: Option<String>,
    disks: Vec<DiskInfo>,
    pcie: Option<String>,
    usb: Option<String>,
    bluetooth: Option<String>,
}

#[derive(Serialize)]
struct DiskInfo {
    name: String,
    file_system: String,
    total_space: u64,
    used_space: u64,
}

fn is_termux() -> bool {
    std::env::var("PREFIX").map_or(false, |p| p.contains("com.termux"))
        || std::fs::metadata("/data/data/com.termux/files").is_ok()
}

fn gather_linux(info: &mut MachineInfo) {
    if let Ok(vendor) = std::fs::read_to_string("/sys/class/dmi/id/sys_vendor") {
        info.manufacturer = Some(vendor.trim().to_string());
    }
    if let Ok(model) = std::fs::read_to_string("/sys/class/dmi/id/product_name") {
        info.model = Some(model.trim().to_string());
    }
    if info.model.is_none() {
        if let Ok(model) = std::fs::read_to_string("/proc/device-tree/model") {
            info.model = Some(model.trim_matches('\0').to_string());
        }
    }
    if is_termux() {
        if let Ok(out) = Command::new("getprop").arg("ro.product.manufacturer").output() {
            if let Ok(text) = String::from_utf8(out.stdout) {
                if !text.trim().is_empty() {
                    info.manufacturer = Some(text.trim().to_string());
                }
            }
        }
        if let Ok(out) = Command::new("getprop").arg("ro.product.model").output() {
            if let Ok(text) = String::from_utf8(out.stdout) {
                if !text.trim().is_empty() {
                    info.model = Some(text.trim().to_string());
                }
            }
        }
    }
}

fn gather_windows(info: &mut MachineInfo) {
    if let Ok(out) = Command::new("wmic")
        .args(["computersystem", "get", "manufacturer,model"])
        .output()
    {
        if let Ok(text) = String::from_utf8(out.stdout) {
            for line in text.lines().skip(1) {
                let parts: Vec<_> = line.split_whitespace().collect();
                if parts.len() >= 2 {
                    info.manufacturer = Some(parts[0].to_string());
                    info.model = Some(parts[1..].join(" "));
                    break;
                }
            }
        }
    }
}

fn main() {
    let args = Args::parse();

    let sys = System::new_all();

    let disks = Disks::new_with_refreshed_list();

    let mut info = MachineInfo {
        os_name: System::name(),
        kernel_version: System::kernel_version(),
        hostname: System::host_name(),
        cpu_brand: sys.cpus().first().map(|c| c.brand().to_string()).unwrap_or_default(),
        cpu_cores: sys.cpus().len(),
        total_memory: sys.total_memory(),
        manufacturer: None,
        model: None,
        disks: disks
            .iter()
            .map(|d| DiskInfo {
                name: d.name().to_string_lossy().to_string(),
                file_system: d.file_system().to_string_lossy().to_string(),
                total_space: d.total_space(),
                used_space: d.total_space() - d.available_space(),
            })
            .collect(),
        pcie: run_command("lspci", &[]),
        usb: run_command("lsusb", &[]),
        bluetooth: run_command("lspci", &[]).and_then(|s| {
            let lines: Vec<String> = s
                .lines()
                .filter(|l| l.to_lowercase().contains("bluetooth"))
                .map(|l| l.to_string())
                .collect();
            if lines.is_empty() { None } else { Some(lines.join("\n")) }
        }),
    };

    match std::env::consts::OS {
        "linux" => gather_linux(&mut info),
        "windows" => gather_windows(&mut info),
        _ => {}
    }

    if args.json {
        println!("{}", serde_json::to_string_pretty(&info).unwrap());
    } else {
        if let Some(ref name) = info.os_name {
            print!("OS: {}", name);
            if let Some(ref ver) = info.kernel_version {
                print!(" ({})", ver);
            }
            println!();
        }
        if let Some(ref host) = info.hostname {
            println!("Hostname: {}", host);
        }
        println!("CPU: {} ({} cores)", info.cpu_brand, info.cpu_cores);
        println!("Total memory: {} KB", info.total_memory);
        if let Some(ref m) = info.manufacturer {
            println!("Manufacturer: {}", m);
        }
        if let Some(ref m) = info.model {
            println!("Model: {}", m);
        }
        if !info.disks.is_empty() {
            println!("Disks:");
            for d in &info.disks {
                println!(
                    "  {}: {} used of {} bytes ({})",
                    d.name,
                    d.used_space,
                    d.total_space,
                    d.file_system
                );
            }
        }
        if let Some(ref p) = info.pcie {
            println!("PCIe devices:\n{}", p.trim_end());
        }
        if let Some(ref u) = info.usb {
            println!("USB devices:\n{}", u.trim_end());
        }
        if let Some(ref b) = info.bluetooth {
            println!("Bluetooth devices:\n{}", b.trim_end());
        }
    }
}

