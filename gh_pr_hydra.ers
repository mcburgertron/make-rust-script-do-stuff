#!/usr/bin/env rust-script
//! GitHub PR Hydra Toolkit (rust-script edition).
//!
//! ```bash,no_run
//! $ ./gh_pr_hydra.ers --help
//! ```
//!
//! ```powershell,no_run
//! PS> .\gh_pr_hydra.ers --help
//! ```
//!
//! Branch-manipulating commands require push permission to the repository.
//! Run `gh auth login` if needed before using this tool.
//!
//! ## Requirements
//! - Platforms: Windows, macOS, Linux
//! - Tools: gh CLI, git
//!
//! ```cargo
//! [package]
//! name = "gh_pr_hydra"
//! version = "0.1.0"
//! authors = ["mcburgertron <verbprobe@outlook.com>"]
//! edition = "2021"
//!
//! [dependencies]
//! clap = { version = "4", features = ["derive"] }
//! anyhow = "1"
//! serde = { version = "1", features = ["derive"] }
//! serde_json = "1"
//! urlencoding = "2"
//! ```

#![warn(clippy::all, missing_docs, rust_2018_idioms)]

use anyhow::{bail, Context, Result};
use clap::{Parser, Subcommand};
use serde::Deserialize;
use std::process::{Command, Output};
use urlencoding::encode;

#[derive(Parser)]
#[command(author, version, about)]
struct Cli {
    /// Path to a local git repository
    #[arg(long)]
    repo_path: Option<String>,
    #[command(subcommand)]
    command: Commands,
}

#[derive(Subcommand)]
enum Commands {
    /// Merge PRs by author serially
    MergeSerial {
        #[arg(long)]
        author: String,
        #[arg(long, default_value_t = false)]
        delete_branch: bool,
        #[arg(long, default_value_t = false)]
        what_if: bool,
    },
    /// Show mergeability status of PRs by author
    MergeDivination {
        #[arg(long)]
        author: String,
    },
    /// Check for overlapping files across PRs by author
    MergeConflicts {
        #[arg(long)]
        author: String,
    },
    /// Safely remove a branch
    RemoveBranchSafe {
        #[arg(long)]
        branch: String,
        #[arg(long, default_value_t = false)]
        what_if: bool,
    },
    /// Mark draft PRs by author as ready for review
    ReadyDrafts {
        #[arg(long)]
        author: String,
        #[arg(long, default_value_t = false)]
        what_if: bool,
    },
    /// Remove all remote branches fully merged into the default branch
    CleanMerged {
        #[arg(long, default_value_t = false)]
        what_if: bool,
    },
}

#[allow(clippy::redundant_pub_crate, clippy::uninlined_format_args)]
mod internal {
    use super::{bail, encode, Command, Context, Deserialize, Output, Result};
    use std::io::{self, Write};

    pub(crate) fn run(cmd: &mut Command) -> Result<Output> {
        cmd.output()
            .with_context(|| format!("spawning {}", cmd.get_program().to_string_lossy()))
    }

    pub(crate) fn ensure_gh_ready() -> Result<()> {
        let mut cmd = Command::new("gh");
        cmd.args(["repo", "view", "--json", "viewerPermission"]);
        let output = run(&mut cmd)?;
        if !output.status.success() {
            if String::from_utf8_lossy(&output.stderr).contains("HTTP 404") {
                bail!("Current GitHub account cannot access this repository. Ensure you're logged into the correct account.");
            }
            bail!("`gh repo view` failed: {}", String::from_utf8_lossy(&output.stderr));
        }
        #[allow(clippy::items_after_statements)]
        #[derive(Deserialize)]
        struct Perm { #[serde(rename = "viewerPermission")] viewer_permission: Option<String> }
        let _perm: Perm = serde_json::from_slice(&output.stdout)?;
        Ok(())
    }

    pub(crate) fn ensure_push_permission() -> Result<()> {
        let mut cmd = Command::new("gh");
        cmd.args(["repo", "view", "--json", "viewerPermission"]);
        let output = run(&mut cmd)?;
        if !output.status.success() {
            bail!("`gh repo view` failed: {}", String::from_utf8_lossy(&output.stderr));
        }
        #[derive(Deserialize)]
        struct Perm { #[serde(rename = "viewerPermission")] viewer_permission: Option<String> }
        let perm: Perm = serde_json::from_slice(&output.stdout)?;
        match perm.viewer_permission.as_deref() {
            Some("ADMIN" | "MAINTAIN" | "WRITE") => Ok(()),
            _ => bail!("Current GitHub account lacks push permission to this repository. Ensure you're logged into the correct account."),
        }
    }

    #[derive(Deserialize)]
    pub(crate) struct BranchInfo {
        #[serde(default)]
        pub protected: bool,
        pub commit: Commit,
    }

    #[derive(Deserialize)]
    pub(crate) struct Commit {
        pub sha: String,
    }

    pub(crate) fn branch_has_merged_pr(repo: &str, branch: &str) -> Result<bool> {
        let mut cmd = Command::new("gh");
        cmd.args([
            "pr",
            "list",
            "--repo",
            repo,
            "--state",
            "merged",
            "--head",
            branch,
            "--json",
            "number",
        ]);
        let out = run(&mut cmd)?;
        if !out.status.success() {
            bail!("`gh pr list` failed: {}", String::from_utf8_lossy(&out.stderr));
        }
        let prs: Vec<serde_json::Value> = serde_json::from_slice(&out.stdout)?;
        Ok(!prs.is_empty())
    }

    pub(crate) fn get_repo() -> Result<String> {
        let mut cmd = Command::new("gh");
        cmd.args(["repo", "view", "--json", "nameWithOwner"]);
        let out = run(&mut cmd)?;
        if !out.status.success() {
            bail!("`gh repo view` failed: {}", String::from_utf8_lossy(&out.stderr));
        }
        #[allow(clippy::items_after_statements)]
        #[derive(Deserialize)]
        struct Repo {
            #[serde(rename = "nameWithOwner")]
            name_with_owner: String,
        }
        let repo: Repo = serde_json::from_slice(&out.stdout)?;
        Ok(repo.name_with_owner)
    }

    pub(crate) fn get_default_branch() -> Result<String> {
        let mut cmd = Command::new("gh");
        cmd.args(["repo", "view", "--json", "defaultBranchRef"]);
        let out = run(&mut cmd)?;
        if !out.status.success() {
            bail!("`gh repo view` failed: {}", String::from_utf8_lossy(&out.stderr));
        }
        #[allow(clippy::items_after_statements)]
        #[derive(Deserialize)]
        struct Ref {
            #[serde(rename = "defaultBranchRef")]
            default_branch_ref: DefaultRef,
        }
        #[allow(clippy::items_after_statements)]
        #[derive(Deserialize)]
        struct DefaultRef { name: String }
        let r: Ref = serde_json::from_slice(&out.stdout)?;
        Ok(r.default_branch_ref.name)
    }

    pub(crate) fn test_branch_deletion_safety(branch: &str, repo: &str) -> Result<bool> {
        let default = get_default_branch()?;
        if branch == default {
            eprintln!("\u{2022} {branch} is the default branch; skipping.");
            return Ok(false);
        }
        let mut cmd = Command::new("gh");
        let b = encode(branch);
        cmd.args(["api", &format!("repos/{}/branches/{}", repo, b)]);
        let out = run(&mut cmd)?;
        if !out.status.success() {
            bail!("`gh api` failed: {}", String::from_utf8_lossy(&out.stderr));
        }
        let info: BranchInfo = serde_json::from_slice(&out.stdout)?;
        if info.protected {
            eprintln!("\u{2022} {branch} is protected; skipping.");
            return Ok(false);
        }
        if branch_has_merged_pr(repo, branch)? {
            return Ok(true);
        }
        let mut mb = Command::new("git");
        mb.args(["merge-base", "--is-ancestor", &info.commit.sha, &format!("origin/{default}")]);
        let out = run(&mut mb)?;
        if !out.status.success() {
            eprintln!("\u{2022} {branch} is not fully merged into {default}; skipping.");
            return Ok(false);
        }
        Ok(true)
    }

    pub(crate) fn remove_branch_safe(branch: &str, repo: &str, what_if: bool) -> Result<()> {
        if !test_branch_deletion_safety(branch, repo)? { return Ok(()); }
        if what_if {
            println!("Would delete remote branch {branch}");
            return Ok(());
        }
        let mut cmd = Command::new("gh");
        let path = format!("heads/{branch}");
        let r = encode(&path);
        cmd.args(["api", "-X", "DELETE", &format!("repos/{repo}/git/refs/{r}")]);
        let out = run(&mut cmd)?;
        if out.status.success() {
            println!("\u{2713} Deleted remote branch {branch}");
        } else {
            eprintln!("\u{2717} Failed to delete {branch}");
        }
        Ok(())
    }

    pub(crate) fn list_branches(repo: &str) -> Result<Vec<String>> {
        let mut cmd = Command::new("gh");
        cmd.args(["api", "--paginate", &format!("repos/{}/branches?per_page=100", repo), "-q", ".[].name"]);
        let out = run(&mut cmd)?;
        if !out.status.success() {
            bail!("`gh api` failed: {}", String::from_utf8_lossy(&out.stderr));
        }
        Ok(String::from_utf8_lossy(&out.stdout).lines().map(str::to_string).collect())
    }

    pub(crate) fn clean_merged_branches(repo: &str, what_if: bool) -> Result<()> {
        println!("[Clean Merged] Syncing local repository...");
        let mut fetch = Command::new("git");
        fetch.args(["fetch", "--prune"]);
        let out = run(&mut fetch)?;
        if !out.status.success() {
            eprintln!("Warning: 'git fetch --prune' failed");
        }
        println!("[Clean Merged] Checking branches...");
        for branch in list_branches(repo)? {
            remove_branch_safe(&branch, repo, what_if)?;
        }
        let mut fetch = Command::new("git");
        fetch.args(["fetch", "--prune"]);
        let out = run(&mut fetch)?;
        if !out.status.success() {
            eprintln!("Warning: final 'git fetch --prune' failed");
        }
        Ok(())
    }

    #[derive(Deserialize)]
    pub(crate) struct PrItem {
        pub number: u64,
        pub title: String,
        #[serde(rename = "headRefName")]
        pub head_ref_name: Option<String>,
        #[serde(rename = "isDraft")]
        pub is_draft: Option<bool>,
        pub mergeable: Option<String>,
        pub files: Option<Vec<FileItem>>, // for view
    }

    #[derive(Deserialize)]
    pub(crate) struct FileItem { pub path: String }

    pub(crate) fn merge_serial(author: &str, delete_branch: bool, what_if: bool) -> Result<()> {
        println!("[Serial Mode] Merging PRs by {author}, one at a time...");
        let mut cmd = Command::new("gh");
        cmd.args(["pr", "list", "--author", author, "--state", "open", "--json", "number,title,headRefName"]);
        let out = run(&mut cmd)?;
        if !out.status.success() {
            bail!("`gh pr list` failed: {}", String::from_utf8_lossy(&out.stderr));
        }
        let prs: Vec<PrItem> = serde_json::from_slice(&out.stdout)?;
        let repo = get_repo()?;
        for pr in prs {
            let pr_number = pr.number.to_string();
            let title = &pr.title;
            let branch = pr.head_ref_name.clone().unwrap_or_default();
            println!("Attempting to merge PR #{pr_number}; '{title}'");
            let mut merge_cmd = Command::new("gh");
            merge_cmd.args(["pr", "merge", &pr_number, "--squash"]);
            if delete_branch { merge_cmd.arg("--delete-branch"); }
            let result = run(&mut merge_cmd)?;
            if result.status.success() {
                println!("\u{2713} PR #{pr_number} merged.");
                if delete_branch {
                    let mut check = Command::new("gh");
                    let b = encode(&branch);
                    check.args(["api", &format!("repos/{repo}/branches/{b}"), "-q", ".name"]);
                    let branch_exists = run(&mut check)?.status.success();
                    if branch_exists {
                        println!("\u{2022} Remote branch {branch} still exists; performing safety checks…");
                        remove_branch_safe(&branch, &repo, what_if)?;
                    } else {
                        println!("\u{2022} Remote branch {branch} confirmed deleted.");
                    }
                }
            } else {
                eprintln!("\u{2717} PR #{pr_number} failed to merge. Reason:");
                io::stderr().write_all(&result.stderr)?;
                let mut file = std::fs::OpenOptions::new().append(true).create(true).open("merge_failures.txt")?;
                writeln!(file, "PR #{pr_number}: {title} failed to merge. Reason: {}", String::from_utf8_lossy(&result.stderr))?;
            }
        }
        println!("Serial merge complete. Consult merge_failures.txt for stragglers.");
        Ok(())
    }

    pub(crate) fn merge_divination(author: &str) -> Result<()> {
        println!("[Merge Divination] Peering into the mergeable fates of {author}'s PRs...");
        let mut cmd = Command::new("gh");
        cmd.args(["pr", "list", "--author", author, "--state", "open", "--json", "number,title,mergeable"]);
        let out = run(&mut cmd)?;
        if !out.status.success() {
            bail!("`gh pr list` failed: {}", String::from_utf8_lossy(&out.stderr));
        }
        let prs: Vec<PrItem> = serde_json::from_slice(&out.stdout)?;
        let mergeable: Vec<_> = prs.iter().filter(|p| p.mergeable.as_deref() == Some("MERGEABLE")).collect();
        let conflicted: Vec<_> = prs.iter().filter(|p| p.mergeable.as_deref() == Some("CONFLICTING")).collect();
        let unknown: Vec<_> = prs.iter().filter(|p| p.mergeable.is_none() || p.mergeable.as_deref() == Some("UNKNOWN")).collect();
        println!("\nMergeable PRs:");
        if mergeable.is_empty() { println!("  (none)"); } else { for p in mergeable { println!("  \u{2713} PR #{number}: {title}", number=p.number, title=p.title); } }
        println!("\nPRs with merge conflicts:");
        if conflicted.is_empty() { println!("  (none)"); } else { for p in conflicted { println!("  \u{2717} PR #{number}: {title}", number=p.number, title=p.title); } }
        println!("\nPRs with unknown mergeability (prophecy unclear):");
        if unknown.is_empty() { println!("  (none)"); } else { for p in unknown { println!("  ? PR #{number}: {title}", number=p.number, title=p.title); } }
        Ok(())
    }

    pub(crate) fn merge_conflicts(author: &str) -> Result<()> {
        println!("[Merge Conflicts] Checking PRs by {author} for overlapping files...");
        let mut cmd = Command::new("gh");
        cmd.args(["pr", "list", "--author", author, "--state", "open", "--json", "number,title"]);
        let out = run(&mut cmd)?;
        if !out.status.success() {
            bail!("`gh pr list` failed: {}", String::from_utf8_lossy(&out.stderr));
        }
        let prs: Vec<PrItem> = serde_json::from_slice(&out.stdout)?;
        println!("Found {} open PR(s).", prs.len());
        let mut files_map = std::collections::HashMap::new();
        for pr in &prs {
            println!("Fetching files for PR #{pr_number}", pr_number = pr.number);
            let mut cmd = Command::new("gh");
            cmd.args(["pr", "view", &pr.number.to_string(), "--json", "number,title,files"]);
            let out = run(&mut cmd)?;
            if !out.status.success() {
                bail!("`gh pr view` failed: {}", String::from_utf8_lossy(&out.stderr));
            }
            let view: PrItem = serde_json::from_slice(&out.stdout)?;
            let paths: Vec<String> = view.files.unwrap_or_default().into_iter().map(|f| f.path).collect();
            files_map.insert(pr.number, paths);
        }

        let mut conflict_found = false;
        for (&a, files_a) in &files_map {
            for (&b, files_b) in &files_map {
                if a < b {
                    let overlap: Vec<&String> = files_a.iter().filter(|f| files_b.contains(*f)).collect();
                    if !overlap.is_empty() {
                        let list = overlap.iter().map(|s| s.as_str()).collect::<Vec<_>>().join(", ");
                        eprintln!("PR #{a} and PR #{b} both modify: {list}");
                        conflict_found = true;
                    }
                }
            }
        }

        if !conflict_found {
            println!("No overlapping files detected among the listed PRs.");
        }
        Ok(())
    }

    pub(crate) fn ready_drafts(author: &str, what_if: bool) -> Result<()> {
        println!("[Ready Drafts] Converting {author}'s draft PRs to ready for review...");
        let mut cmd = Command::new("gh");
        cmd.args(["pr", "list", "--author", author, "--state", "open", "--json", "number,title,isDraft"]);
        let out = run(&mut cmd)?;
        if !out.status.success() {
            bail!("`gh pr list` failed: {}", String::from_utf8_lossy(&out.stderr));
        }
        let prs: Vec<PrItem> = serde_json::from_slice(&out.stdout)?;
        let drafts: Vec<_> = prs.into_iter().filter(|p| p.is_draft.unwrap_or(false)).collect();
        if drafts.is_empty() {
            println!("No draft PRs found for {author}.");
            return Ok(());
        }
        for pr in drafts {
            println!("Draft PR #{number}: {title}", number = pr.number, title = pr.title);
            if what_if {
                println!("  Would mark ready for review");
            } else {
                let mut rc = Command::new("gh");
                rc.args(["pr", "ready", &pr.number.to_string()]);
                let out = run(&mut rc)?;
                if out.status.success() {
                    println!("  \u{2713} Marked ready");
                } else {
                    eprintln!("  \u{2717} Failed to mark ready");
                }
            }
        }
        Ok(())
    }

} // end mod internal

fn main() -> Result<()> {
    let cli = Cli::parse();
    if let Some(path) = cli.repo_path.as_deref() {
        std::env::set_current_dir(path)
            .with_context(|| format!("Failed to change directory to '{path}'"))?;
        let mut check = Command::new("git");
        check.args(["rev-parse", "--is-inside-work-tree"]);
        let out = internal::run(&mut check)?;
        if !out.status.success() {
            bail!("'{path}' is not a git repository");
        }
    }
    internal::ensure_gh_ready()?;
    match cli.command {
        Commands::MergeSerial { author, delete_branch, what_if } => {
            internal::ensure_push_permission()?;
            internal::merge_serial(&author, delete_branch, what_if)?
        }
        Commands::MergeDivination { author } => internal::merge_divination(&author)?,
        Commands::MergeConflicts { author } => internal::merge_conflicts(&author)?,
        Commands::RemoveBranchSafe { branch, what_if } => {
            internal::ensure_push_permission()?;
            let repo = internal::get_repo()?;
            internal::remove_branch_safe(&branch, &repo, what_if)?;
        }
        Commands::ReadyDrafts { author, what_if } => {
            internal::ensure_push_permission()?;
            internal::ready_drafts(&author, what_if)?
        }
        Commands::CleanMerged { what_if } => {
            internal::ensure_push_permission()?;
            let repo = internal::get_repo()?;
            internal::clean_merged_branches(&repo, what_if)?;
        }
    }
    Ok(())
}

#[cfg(test)]
mod tests {
    use super::internal::run;
    use std::process::Command;
    #[test]
    fn run_reports_missing_binary() {
        let mut cmd = Command::new("this-binary-does-not-exist");
        let err = run(&mut cmd).unwrap_err();
        assert!(err.to_string().contains("spawning"));
    }
}
