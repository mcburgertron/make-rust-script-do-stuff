#!/usr/bin/env rust-script
//! Atlassian Jira token micro-service.
//!
//! ```bash,no_run
//! $ ./boarder.ers --help
//! ```
//!
//! ```cargo
//! [dependencies]
//! clap = { version = "4", features = ["derive"] }
//! reqwest = { version = "0.11", features = ["json", "blocking", "rustls-tls"] }
//! serde = { version = "1", features = ["derive"] }
//! serde_json = "1"
//! tokio = { version = "1", features = ["macros", "rt-multi-thread", "time", "fs", "process"] }
//! hyper = { version = "0.14", features = ["full"] }
//! anyhow = "1"
//! chrono = { version = "0.4", features = ["serde"] }
//! ```
#![warn(clippy::all, missing_docs, rust_2018_idioms)]

use anyhow::Context;
use chrono::{DateTime, Duration as ChronoDuration, Utc};
use clap::Parser;
use hyper::{
    service::{make_service_fn, service_fn},
    Body, Request, Response, Server, StatusCode,
};
use serde::{Deserialize, Serialize};
use std::path::PathBuf;
use std::sync::atomic::{AtomicBool, Ordering};
use std::sync::Arc;
use tokio::sync::RwLock;
use tokio::time::{self, Duration};

#[derive(Parser, Debug)]
#[command(version, about = "Atlassian Jira Token micro-service")]
struct Args {
    #[arg(long)]
    client_id: String,
    #[arg(long)]
    client_secret: String,
    #[arg(long)]
    auth_code: Option<String>,
    /// Print the URL to obtain the initial authorization code and exit
    #[arg(long)]
    print_auth_url: bool,
    /// Port for the local OAuth redirect URI. Atlassian usually expects
    /// `http://localhost:8080`, so change this only if your OAuth app
    /// accepts a different port.
    #[arg(long, default_value_t = 8080)]
    redirect_port: u16,
    /// Port the token service listens on. Use this in API calls.
    #[arg(long, default_value_t = 8080)]
    port: u16,
    /// S3 bucket for token sync
    #[arg(long)]
    aws_s3_bucket: Option<String>,
    /// Object key for the JSON token file
    #[arg(long)]
    aws_s3_key: Option<String>,
}

#[derive(Debug, Serialize, Deserialize, Clone)]
struct TokenInfo {
    access_token: String,
    refresh_token: String,
    expires_at: DateTime<Utc>,
}

#[derive(Deserialize)]
struct TokenResp {
    access_token: String,
    refresh_token: String,
    expires_in: i64,
}

struct AppState {
    cfg: Config,
    token: Option<TokenInfo>,
    store: Option<PathBuf>,
    s3: Option<S3Config>,
}

#[derive(Clone)]
struct S3Config {
    bucket: String,
    key: String,
}

fn parse_s3_config(bucket: Option<String>, key: Option<String>) -> anyhow::Result<Option<S3Config>> {
    match (bucket, key) {
        (Some(b), Some(k)) => Ok(Some(S3Config { bucket: b, key: k })),
        (None, None) => Ok(None),
        _ => {
            anyhow::bail!("--aws-s3-bucket and --aws-s3-key must be used together")
        }
    }
}

#[derive(Clone)]
struct Config {
    client_id: String,
    client_secret: String,
    redirect_uri: String,
}

fn auth_url(cfg: &Config) -> String {
    format!(
        "https://auth.atlassian.com/authorize?audience=api.atlassian.com&client_id={}\
&scope=offline_access%20read%3Ajira-user%20manage%3Ajira-configuration%20manage%3Ajira-project%20manage%3Ajira-webhook%20write%3Ajira-work%20read%3Ajira-work&redirect_uri={}\
&state=some_state&response_type=code&prompt=consent",
        cfg.client_id, cfg.redirect_uri
    )
}

const TOKEN_URL: &str = "https://auth.atlassian.com/oauth/token";
const REFRESH_THRESHOLD_SECS: i64 = 15 * 60;
static REFRESHING: AtomicBool = AtomicBool::new(false);

async fn save_refresh_token(path: &PathBuf, token: &str) -> std::io::Result<()> {
    tokio::fs::write(path, token).await
}

async fn load_refresh_token_local(path: &PathBuf) -> Option<String> {
    match tokio::fs::read_to_string(path).await {
        Ok(s) => Some(s.trim().to_string()),
        Err(_) => None,
    }
}

#[derive(Serialize, Deserialize)]
struct StoredTokens {
    access_token: String,
    refresh_token: String,
}

async fn load_tokens_s3(cfg: &S3Config) -> anyhow::Result<Option<StoredTokens>> {
    use anyhow::Context;
    use tokio::process::Command;

    ensure_aws_credentials().await?;
    let mut cmd = Command::new("aws");
    cmd.args([
        "s3",
        "cp",
        &format!("s3://{}/{}", cfg.bucket, cfg.key),
        "-",
    ]);
    let out = cmd.output().await.context("spawning aws")?;
    if !out.status.success() {
        return Ok(None);
    }
    let data = String::from_utf8_lossy(&out.stdout);
    let tok: StoredTokens = serde_json::from_str(data.trim()).context("parsing S3 token JSON")?;
    Ok(Some(tok))
}

async fn ensure_aws_credentials() -> anyhow::Result<()> {
    use anyhow::Context;
    use std::path::PathBuf;
    use tokio::fs;
    let home = std::env::var("HOME")
        .or_else(|_| std::env::var("USERPROFILE"))
        .context("HOME or USERPROFILE not set")?;
    let path = PathBuf::from(home).join(".aws/credentials");
    let data = fs::read_to_string(&path)
        .await
        .with_context(|| format!("reading {}", path.display()))?;
    let mut in_default = false;
    let mut has_id = false;
    let mut has_secret = false;
    for line in data.lines() {
        let t = line.trim();
        if t.starts_with('#') || t.is_empty() {
            continue;
        }
        if t.starts_with('[') && t.ends_with(']') {
            in_default = t == "[default]";
            continue;
        }
        if in_default {
            if let Some((key, _)) = t.split_once('=') {
                let key = key.trim();
                if key == "aws_access_key_id" {
                    has_id = true;
                } else if key == "aws_secret_access_key" {
                    has_secret = true;
                }
            }
        }
    }
    if !has_id || !has_secret {
        anyhow::bail!("default AWS credentials missing required keys");
    }
    Ok(())
}

async fn ensure_aws_cli() -> anyhow::Result<()> {
    use anyhow::Context;
    use tokio::process::Command;
    let out = Command::new("aws")
        .arg("--version")
        .output()
        .await
        .context("spawning aws")?;
    if !out.status.success() {
        anyhow::bail!("`aws --version` failed");
    }
    Ok(())
}

async fn sync_s3(cfg: &S3Config, access: &str, refresh: &str) -> anyhow::Result<()> {
    use anyhow::Context;
    use tokio::io::AsyncWriteExt;
    use tokio::process::Command;
    use std::process::Stdio;

    ensure_aws_credentials().await?;
    let mut cmd = Command::new("aws");
    cmd.args([
        "s3",
        "cp",
        "-",
        &format!("s3://{}/{}", cfg.bucket, cfg.key),
    ]);
    cmd.stdin(Stdio::piped());
    let mut child = cmd.spawn().context("spawning aws")?;
    if let Some(mut stdin) = child.stdin.take() {
        let body = serde_json::to_string(&StoredTokens {
            access_token: access.to_string(),
            refresh_token: refresh.to_string(),
        })?;
        stdin
            .write_all(body.as_bytes())
            .await
            .context("sending tokens to aws")?;
    }
    let out = child.wait_with_output().await.context("awaiting aws")?;
    if !out.status.success() {
        anyhow::bail!("aws s3 cp failed: {}", String::from_utf8_lossy(&out.stderr));
    }
    Ok(())
}

enum Grant {
    AuthCode(String),
    Refresh(String),
}

async fn request_new_tokens(cfg: &Config, grant: Grant) -> anyhow::Result<TokenResp> {
    let client = reqwest::Client::new();
    let mut body = serde_json::json!({
        "client_id": cfg.client_id,
        "client_secret": cfg.client_secret,
        "redirect_uri": cfg.redirect_uri,
    });
    match grant {
        Grant::AuthCode(code) => {
            body["grant_type"] = serde_json::json!("authorization_code");
            body["code"] = serde_json::json!(code);
        }
        Grant::Refresh(rt) => {
            body["grant_type"] = serde_json::json!("refresh_token");
            body["refresh_token"] = serde_json::json!(rt);
        }
    }
    let resp = client.post(TOKEN_URL).json(&body).send().await?;
    if !resp.status().is_success() {
        anyhow::bail!("token request failed: {}", resp.status());
    }
    let tr: TokenResp = resp.json().await?;
    Ok(tr)
}

async fn renew_tokens(
    state: &Arc<RwLock<AppState>>,
    auth_code_once: &mut Option<String>,
) -> anyhow::Result<()> {
    if REFRESHING.swap(true, Ordering::SeqCst) {
        return Ok(());
    }
    struct Reset;
    impl Drop for Reset {
        fn drop(&mut self) {
            REFRESHING.store(false, Ordering::SeqCst);
        }
    }
    let _reset = Reset;
    // clone data without holding the lock across .await
    let (cfg, token_opt, store, s3_cfg) = {
        let st = state.read().await;
        (st.cfg.clone(), st.token.clone(), st.store.clone(), st.s3.clone())
    };

    let refresh_opt = if let Some(tok) = token_opt {
        Some(tok.refresh_token)
    } else if let Some(path) = &store {
        load_refresh_token_local(path).await
    } else if let Some(cfg) = &s3_cfg {
        match load_tokens_s3(cfg).await? {
            Some(tok) => Some(tok.refresh_token),
            None => None,
        }
    } else {
        None
    };

    let grant = if let Some(ref_token) = refresh_opt {
        Grant::Refresh(ref_token)
    } else if let Some(code) = auth_code_once.take() {
        Grant::AuthCode(code)
    } else {
        eprintln!(
            "First run needs --auth-code. Open this URL to obtain it:\n{}",
            auth_url(&cfg)
        );
        return Ok(());
    };

    match request_new_tokens(&cfg, grant).await {
        Ok(resp) => {
            let expires_at = Utc::now() + ChronoDuration::seconds(resp.expires_in);
            if let Some(ref path) = store {
                save_refresh_token(path, &resp.refresh_token)
                    .await
                    .with_context(|| format!("saving {}", path.display()))?;
            }
            let s3_cfg = {
                let mut st = state.write().await;
                st.token = Some(TokenInfo {
                    access_token: resp.access_token.clone(),
                    refresh_token: resp.refresh_token.clone(),
                    expires_at,
                });
                st.s3.clone()
            };
            eprintln!("Token renewed, expires at {}", expires_at);
            if let Some(cfg) = s3_cfg {
                sync_s3(&cfg, &resp.access_token, &resp.refresh_token).await?;
            }
        }
        Err(e) => {
            eprintln!("Token renewal failed: {e:?}");
        }
    }
    Ok(())
}

async fn handle_req(
    req: Request<Body>,
    state: Arc<RwLock<AppState>>,
    auth_code_once: Arc<RwLock<Option<String>>>,
) -> Result<Response<Body>, hyper::Error> {
    if req.method() == hyper::Method::GET && req.uri().path() == "/token" {
        let refresh_needed = {
            let st = state.read().await;
            match &st.token {
                Some(info) => (info.expires_at - Utc::now()).num_seconds() < REFRESH_THRESHOLD_SECS,
                None => true,
            }
        };
        eprintln!("/token requested; refresh_needed={refresh_needed}");
        let mut refreshed = false;
        if refresh_needed {
            let mut ac = auth_code_once.write().await;
            if let Err(e) = renew_tokens(&state, &mut ac).await {
                eprintln!("Token renewal failed: {e:?}");
            } else {
                refreshed = true;
            }
        }
        let st = state.read().await;
        if let Some(ref info) = st.token {
            let body = serde_json::to_string(&serde_json::json!({
                "access_token": info.access_token,
                "expires_at": info.expires_at.to_rfc3339(),
                "refreshed": refreshed,
            }))
            .unwrap();
            let mut res = Response::new(Body::from(body));
            if refreshed {
                *res.status_mut() = StatusCode::ACCEPTED;
            }
            Ok(res)
        } else {
            let mut res = Response::new(Body::from("unable to obtain tokens"));
            *res.status_mut() = StatusCode::INTERNAL_SERVER_ERROR;
            Ok(res)
        }
    } else {
        let mut res = Response::new(Body::from("Not Found"));
        *res.status_mut() = StatusCode::NOT_FOUND;
        Ok(res)
    }
}

#[tokio::main]
async fn main() -> anyhow::Result<()> {
    let args = Args::parse();

    let cfg = Config {
        client_id: args.client_id,
        client_secret: args.client_secret,
        redirect_uri: format!("http://localhost:{}", args.redirect_port),
    };

    if args.print_auth_url {
        println!("{}", auth_url(&cfg));
        return Ok(());
    }
    let s3_cfg = parse_s3_config(args.aws_s3_bucket, args.aws_s3_key)?;

    if s3_cfg.is_some() {
        ensure_aws_cli().await?;
    }

    let store = if s3_cfg.is_some() {
        None
    } else {
        Some(PathBuf::from("jira_refresh.token"))
    };
    let state = Arc::new(RwLock::new(AppState {
        cfg: cfg.clone(),
        token: None,
        store: store.clone(),
        s3: s3_cfg.clone(),
    }));
    if let Some(cfg_s3) = &s3_cfg {
        if let Some(tok) = load_tokens_s3(cfg_s3).await? {
            let mut st = state.write().await;
            st.token = Some(TokenInfo {
                access_token: tok.access_token,
                refresh_token: tok.refresh_token,
                expires_at: Utc::now(),
            });
        }
    }
    let auth_code_once = Arc::new(RwLock::new(args.auth_code));

    {
        let mut ac = auth_code_once.write().await;
        if let Err(e) = renew_tokens(&state, &mut ac).await {
            eprintln!("Token renewal failed: {e:?}");
        }
    }

    if state.read().await.token.is_none() {
        return Ok(());
    }

    let refresh_secs = if s3_cfg.is_some() { 30 * 60 } else { 55 * 60 };
    let st_clone = state.clone();
    let ac_clone = auth_code_once.clone();
    let refresh_handle = tokio::spawn(async move {
        let mut interval = time::interval(Duration::from_secs(refresh_secs));
        loop {
            interval.tick().await;
            let refresh_needed = {
                let st = st_clone.read().await;
                match &st.token {
                    Some(info) => {
                        (info.expires_at - Utc::now()).num_seconds() < REFRESH_THRESHOLD_SECS
                    }
                    None => true,
                }
            };
            if refresh_needed {
                let mut ac = ac_clone.write().await;
                if let Err(e) = renew_tokens(&st_clone, &mut ac).await {
                    eprintln!("Token renewal failed: {e:?}");
                }
            }
        }
    });

    let make_svc = make_service_fn(move |_conn| {
        let st = state.clone();
        let ac = auth_code_once.clone();
        async move {
            Ok::<_, hyper::Error>(service_fn(move |req| {
                handle_req(req, st.clone(), ac.clone())
            }))
        }
    });

    let addr = ([0, 0, 0, 0], args.port).into();
    let server = Server::bind(&addr).serve(make_svc);
    eprintln!("Token server listening on http://{}/token", addr);
    let res = server.await;
    refresh_handle.abort();
    res?;
    Ok(())
}

#[cfg(test)]
mod tests {
    use super::{auth_url, parse_s3_config, Config};

    #[test]
    fn auth_url_contains_client_id() {
        let cfg = Config {
            client_id: "id".into(),
            client_secret: "secret".into(),
            redirect_uri: "http://localhost:8080".into(),
        };
        let url = auth_url(&cfg);
        assert!(url.contains("client_id=id"));
    }

    #[test]
    fn parse_s3_config_requires_both_flags() {
        assert!(parse_s3_config(Some("b".into()), None).is_err());
        assert!(parse_s3_config(None, Some("k".into())).is_err());
        assert!(parse_s3_config(None, None).unwrap().is_none());
        assert!(parse_s3_config(Some("b".into()), Some("k".into())).unwrap().is_some());
    }
}
